// Generated by Molecule 0.7.0
#![allow(unused_imports)]
#![allow(dead_code)]
#![allow(clippy::if_same_then_else)]

use super::ckb_types::{packed::*, prelude::*};
use super::molecule::{self, prelude::*};
use super::common::*;
extern crate alloc;
pub use alloc::vec::*;
// these lines above are manually added
// replace "molecule" to "molecule" in below code

#[derive(Clone)]
pub struct CompactNFTId(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for CompactNFTId {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for CompactNFTId {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for CompactNFTId {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "smt_type", self.smt_type())?;
        write!(f, ", {}: {}", "issuer_id", self.issuer_id())?;
        write!(f, ", {}: {}", "class_id", self.class_id())?;
        write!(f, ", {}: {}", "token_id", self.token_id())?;
        write!(f, " }}")
    }
}
impl ::core::default::Default for CompactNFTId {
    fn default() -> Self {
        let v: Vec<u8> = vec![
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        ];
        CompactNFTId::new_unchecked(v.into())
    }
}
impl CompactNFTId {
    pub const FIELD_COUNT: usize = 4;
    pub const FIELD_SIZES: [usize; 4] = [1, 20, 4, 4];
    pub const TOTAL_SIZE: usize = 29;

    pub fn smt_type(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(0..1))
    }

    pub fn issuer_id(&self) -> IssuerId {
        IssuerId::new_unchecked(self.0.slice(1..21))
    }

    pub fn class_id(&self) -> Uint32 {
        Uint32::new_unchecked(self.0.slice(21..25))
    }

    pub fn token_id(&self) -> Uint32 {
        Uint32::new_unchecked(self.0.slice(25..29))
    }

    pub fn as_reader<'r>(&'r self) -> CompactNFTIdReader<'r> {
        CompactNFTIdReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for CompactNFTId {
    type Builder = CompactNFTIdBuilder;

    const NAME: &'static str = "CompactNFTId";

    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        CompactNFTId(data)
    }

    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }

    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }

    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        CompactNFTIdReader::from_slice(slice).map(|reader| reader.to_entity())
    }

    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        CompactNFTIdReader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }

    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }

    fn as_builder(self) -> Self::Builder {
        Self::new_builder()
            .smt_type(self.smt_type())
            .issuer_id(self.issuer_id())
            .class_id(self.class_id())
            .token_id(self.token_id())
    }
}
#[derive(Clone, Copy)]
pub struct CompactNFTIdReader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for CompactNFTIdReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for CompactNFTIdReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for CompactNFTIdReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "smt_type", self.smt_type())?;
        write!(f, ", {}: {}", "issuer_id", self.issuer_id())?;
        write!(f, ", {}: {}", "class_id", self.class_id())?;
        write!(f, ", {}: {}", "token_id", self.token_id())?;
        write!(f, " }}")
    }
}
impl<'r> CompactNFTIdReader<'r> {
    pub const FIELD_COUNT: usize = 4;
    pub const FIELD_SIZES: [usize; 4] = [1, 20, 4, 4];
    pub const TOTAL_SIZE: usize = 29;

    pub fn smt_type(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[0..1])
    }

    pub fn issuer_id(&self) -> IssuerIdReader<'r> {
        IssuerIdReader::new_unchecked(&self.as_slice()[1..21])
    }

    pub fn class_id(&self) -> Uint32Reader<'r> {
        Uint32Reader::new_unchecked(&self.as_slice()[21..25])
    }

    pub fn token_id(&self) -> Uint32Reader<'r> {
        Uint32Reader::new_unchecked(&self.as_slice()[25..29])
    }
}
impl<'r> molecule::prelude::Reader<'r> for CompactNFTIdReader<'r> {
    type Entity = CompactNFTId;

    const NAME: &'static str = "CompactNFTIdReader";

    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().to_owned().into())
    }

    fn new_unchecked(slice: &'r [u8]) -> Self {
        CompactNFTIdReader(slice)
    }

    fn as_slice(&self) -> &'r [u8] {
        self.0
    }

    fn verify(slice: &[u8], _compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len != Self::TOTAL_SIZE {
            return ve!(Self, TotalSizeNotMatch, Self::TOTAL_SIZE, slice_len);
        }
        Ok(())
    }
}
#[derive(Debug, Default)]
pub struct CompactNFTIdBuilder {
    pub(crate) smt_type:  Byte,
    pub(crate) issuer_id: IssuerId,
    pub(crate) class_id:  Uint32,
    pub(crate) token_id:  Uint32,
}
impl CompactNFTIdBuilder {
    pub const FIELD_COUNT: usize = 4;
    pub const FIELD_SIZES: [usize; 4] = [1, 20, 4, 4];
    pub const TOTAL_SIZE: usize = 29;

    pub fn smt_type(mut self, v: Byte) -> Self {
        self.smt_type = v;
        self
    }

    pub fn issuer_id(mut self, v: IssuerId) -> Self {
        self.issuer_id = v;
        self
    }

    pub fn class_id(mut self, v: Uint32) -> Self {
        self.class_id = v;
        self
    }

    pub fn token_id(mut self, v: Uint32) -> Self {
        self.token_id = v;
        self
    }
}
impl molecule::prelude::Builder for CompactNFTIdBuilder {
    type Entity = CompactNFTId;

    const NAME: &'static str = "CompactNFTIdBuilder";

    fn expected_length(&self) -> usize {
        Self::TOTAL_SIZE
    }

    fn write<W: molecule::io::Write>(&self, writer: &mut W) -> molecule::io::Result<()> {
        writer.write_all(self.smt_type.as_slice())?;
        writer.write_all(self.issuer_id.as_slice())?;
        writer.write_all(self.class_id.as_slice())?;
        writer.write_all(self.token_id.as_slice())?;
        Ok(())
    }

    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        CompactNFTId::new_unchecked(inner.into())
    }
}
#[derive(Clone)]
pub struct CompactNFTIdVec(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for CompactNFTIdVec {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for CompactNFTIdVec {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for CompactNFTIdVec {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} [", Self::NAME)?;
        for i in 0..self.len() {
            if i == 0 {
                write!(f, "{}", self.get_unchecked(i))?;
            } else {
                write!(f, ", {}", self.get_unchecked(i))?;
            }
        }
        write!(f, "]")
    }
}
impl ::core::default::Default for CompactNFTIdVec {
    fn default() -> Self {
        let v: Vec<u8> = vec![0, 0, 0, 0];
        CompactNFTIdVec::new_unchecked(v.into())
    }
}
impl CompactNFTIdVec {
    pub const ITEM_SIZE: usize = 29;

    pub fn total_size(&self) -> usize {
        molecule::NUMBER_SIZE * (self.item_count() + 1)
    }

    pub fn item_count(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }

    pub fn len(&self) -> usize {
        self.item_count()
    }

    pub fn is_empty(&self) -> bool {
        self.len() == 0
    }

    pub fn get(&self, idx: usize) -> Option<CompactNFTId> {
        if idx >= self.len() {
            None
        } else {
            Some(self.get_unchecked(idx))
        }
    }

    pub fn get_unchecked(&self, idx: usize) -> CompactNFTId {
        let start = molecule::NUMBER_SIZE + Self::ITEM_SIZE * idx;
        let end = start + Self::ITEM_SIZE;
        CompactNFTId::new_unchecked(self.0.slice(start..end))
    }

    pub fn as_reader<'r>(&'r self) -> CompactNFTIdVecReader<'r> {
        CompactNFTIdVecReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for CompactNFTIdVec {
    type Builder = CompactNFTIdVecBuilder;

    const NAME: &'static str = "CompactNFTIdVec";

    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        CompactNFTIdVec(data)
    }

    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }

    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }

    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        CompactNFTIdVecReader::from_slice(slice).map(|reader| reader.to_entity())
    }

    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        CompactNFTIdVecReader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }

    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }

    fn as_builder(self) -> Self::Builder {
        Self::new_builder().extend(self.into_iter())
    }
}
#[derive(Clone, Copy)]
pub struct CompactNFTIdVecReader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for CompactNFTIdVecReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for CompactNFTIdVecReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for CompactNFTIdVecReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} [", Self::NAME)?;
        for i in 0..self.len() {
            if i == 0 {
                write!(f, "{}", self.get_unchecked(i))?;
            } else {
                write!(f, ", {}", self.get_unchecked(i))?;
            }
        }
        write!(f, "]")
    }
}
impl<'r> CompactNFTIdVecReader<'r> {
    pub const ITEM_SIZE: usize = 29;

    pub fn total_size(&self) -> usize {
        molecule::NUMBER_SIZE * (self.item_count() + 1)
    }

    pub fn item_count(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }

    pub fn len(&self) -> usize {
        self.item_count()
    }

    pub fn is_empty(&self) -> bool {
        self.len() == 0
    }

    pub fn get(&self, idx: usize) -> Option<CompactNFTIdReader<'r>> {
        if idx >= self.len() {
            None
        } else {
            Some(self.get_unchecked(idx))
        }
    }

    pub fn get_unchecked(&self, idx: usize) -> CompactNFTIdReader<'r> {
        let start = molecule::NUMBER_SIZE + Self::ITEM_SIZE * idx;
        let end = start + Self::ITEM_SIZE;
        CompactNFTIdReader::new_unchecked(&self.as_slice()[start..end])
    }
}
impl<'r> molecule::prelude::Reader<'r> for CompactNFTIdVecReader<'r> {
    type Entity = CompactNFTIdVec;

    const NAME: &'static str = "CompactNFTIdVecReader";

    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().to_owned().into())
    }

    fn new_unchecked(slice: &'r [u8]) -> Self {
        CompactNFTIdVecReader(slice)
    }

    fn as_slice(&self) -> &'r [u8] {
        self.0
    }

    fn verify(slice: &[u8], _compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len < molecule::NUMBER_SIZE {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE, slice_len);
        }
        let item_count = molecule::unpack_number(slice) as usize;
        if item_count == 0 {
            if slice_len != molecule::NUMBER_SIZE {
                return ve!(Self, TotalSizeNotMatch, molecule::NUMBER_SIZE, slice_len);
            }
            return Ok(());
        }
        let total_size = molecule::NUMBER_SIZE + Self::ITEM_SIZE * item_count;
        if slice_len != total_size {
            return ve!(Self, TotalSizeNotMatch, total_size, slice_len);
        }
        Ok(())
    }
}
#[derive(Debug, Default)]
pub struct CompactNFTIdVecBuilder(pub(crate) Vec<CompactNFTId>);
impl CompactNFTIdVecBuilder {
    pub const ITEM_SIZE: usize = 29;

    pub fn set(mut self, v: Vec<CompactNFTId>) -> Self {
        self.0 = v;
        self
    }

    pub fn push(mut self, v: CompactNFTId) -> Self {
        self.0.push(v);
        self
    }

    pub fn extend<T: ::core::iter::IntoIterator<Item = CompactNFTId>>(mut self, iter: T) -> Self {
        for elem in iter {
            self.0.push(elem);
        }
        self
    }
}
impl molecule::prelude::Builder for CompactNFTIdVecBuilder {
    type Entity = CompactNFTIdVec;

    const NAME: &'static str = "CompactNFTIdVecBuilder";

    fn expected_length(&self) -> usize {
        molecule::NUMBER_SIZE + Self::ITEM_SIZE * self.0.len()
    }

    fn write<W: molecule::io::Write>(&self, writer: &mut W) -> molecule::io::Result<()> {
        writer.write_all(&molecule::pack_number(self.0.len() as molecule::Number))?;
        for inner in &self.0[..] {
            writer.write_all(inner.as_slice())?;
        }
        Ok(())
    }

    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        CompactNFTIdVec::new_unchecked(inner.into())
    }
}
pub struct CompactNFTIdVecIterator(CompactNFTIdVec, usize, usize);
impl ::core::iter::Iterator for CompactNFTIdVecIterator {
    type Item = CompactNFTId;

    fn next(&mut self) -> Option<Self::Item> {
        if self.1 >= self.2 {
            None
        } else {
            let ret = self.0.get_unchecked(self.1);
            self.1 += 1;
            Some(ret)
        }
    }
}
impl ::core::iter::ExactSizeIterator for CompactNFTIdVecIterator {
    fn len(&self) -> usize {
        self.2 - self.1
    }
}
impl ::core::iter::IntoIterator for CompactNFTIdVec {
    type IntoIter = CompactNFTIdVecIterator;
    type Item = CompactNFTId;

    fn into_iter(self) -> Self::IntoIter {
        let len = self.len();
        CompactNFTIdVecIterator(self, 0, len)
    }
}
impl<'r> CompactNFTIdVecReader<'r> {
    pub fn iter<'t>(&'t self) -> CompactNFTIdVecReaderIterator<'t, 'r> {
        CompactNFTIdVecReaderIterator(&self, 0, self.len())
    }
}
pub struct CompactNFTIdVecReaderIterator<'t, 'r>(&'t CompactNFTIdVecReader<'r>, usize, usize);
impl<'t: 'r, 'r> ::core::iter::Iterator for CompactNFTIdVecReaderIterator<'t, 'r> {
    type Item = CompactNFTIdReader<'t>;

    fn next(&mut self) -> Option<Self::Item> {
        if self.1 >= self.2 {
            None
        } else {
            let ret = self.0.get_unchecked(self.1);
            self.1 += 1;
            Some(ret)
        }
    }
}
impl<'t: 'r, 'r> ::core::iter::ExactSizeIterator for CompactNFTIdVecReaderIterator<'t, 'r> {
    fn len(&self) -> usize {
        self.2 - self.1
    }
}
#[derive(Clone)]
pub struct OwnedCompactNFTValue(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for OwnedCompactNFTValue {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for OwnedCompactNFTValue {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for OwnedCompactNFTValue {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "characteristic", self.characteristic())?;
        write!(f, ", {}: {}", "configure", self.configure())?;
        write!(f, ", {}: {}", "state", self.state())?;
        write!(f, " }}")
    }
}
impl ::core::default::Default for OwnedCompactNFTValue {
    fn default() -> Self {
        let v: Vec<u8> = vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
        OwnedCompactNFTValue::new_unchecked(v.into())
    }
}
impl OwnedCompactNFTValue {
    pub const FIELD_COUNT: usize = 3;
    pub const FIELD_SIZES: [usize; 3] = [8, 1, 1];
    pub const TOTAL_SIZE: usize = 10;

    pub fn characteristic(&self) -> Characteristic {
        Characteristic::new_unchecked(self.0.slice(0..8))
    }

    pub fn configure(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(8..9))
    }

    pub fn state(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(9..10))
    }

    pub fn as_reader<'r>(&'r self) -> OwnedCompactNFTValueReader<'r> {
        OwnedCompactNFTValueReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for OwnedCompactNFTValue {
    type Builder = OwnedCompactNFTValueBuilder;

    const NAME: &'static str = "OwnedCompactNFTValue";

    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        OwnedCompactNFTValue(data)
    }

    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }

    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }

    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        OwnedCompactNFTValueReader::from_slice(slice).map(|reader| reader.to_entity())
    }

    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        OwnedCompactNFTValueReader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }

    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }

    fn as_builder(self) -> Self::Builder {
        Self::new_builder()
            .characteristic(self.characteristic())
            .configure(self.configure())
            .state(self.state())
    }
}
#[derive(Clone, Copy)]
pub struct OwnedCompactNFTValueReader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for OwnedCompactNFTValueReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for OwnedCompactNFTValueReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for OwnedCompactNFTValueReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "characteristic", self.characteristic())?;
        write!(f, ", {}: {}", "configure", self.configure())?;
        write!(f, ", {}: {}", "state", self.state())?;
        write!(f, " }}")
    }
}
impl<'r> OwnedCompactNFTValueReader<'r> {
    pub const FIELD_COUNT: usize = 3;
    pub const FIELD_SIZES: [usize; 3] = [8, 1, 1];
    pub const TOTAL_SIZE: usize = 10;

    pub fn characteristic(&self) -> CharacteristicReader<'r> {
        CharacteristicReader::new_unchecked(&self.as_slice()[0..8])
    }

    pub fn configure(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[8..9])
    }

    pub fn state(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[9..10])
    }
}
impl<'r> molecule::prelude::Reader<'r> for OwnedCompactNFTValueReader<'r> {
    type Entity = OwnedCompactNFTValue;

    const NAME: &'static str = "OwnedCompactNFTValueReader";

    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().to_owned().into())
    }

    fn new_unchecked(slice: &'r [u8]) -> Self {
        OwnedCompactNFTValueReader(slice)
    }

    fn as_slice(&self) -> &'r [u8] {
        self.0
    }

    fn verify(slice: &[u8], _compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len != Self::TOTAL_SIZE {
            return ve!(Self, TotalSizeNotMatch, Self::TOTAL_SIZE, slice_len);
        }
        Ok(())
    }
}
#[derive(Debug, Default)]
pub struct OwnedCompactNFTValueBuilder {
    pub(crate) characteristic: Characteristic,
    pub(crate) configure:      Byte,
    pub(crate) state:          Byte,
}
impl OwnedCompactNFTValueBuilder {
    pub const FIELD_COUNT: usize = 3;
    pub const FIELD_SIZES: [usize; 3] = [8, 1, 1];
    pub const TOTAL_SIZE: usize = 10;

    pub fn characteristic(mut self, v: Characteristic) -> Self {
        self.characteristic = v;
        self
    }

    pub fn configure(mut self, v: Byte) -> Self {
        self.configure = v;
        self
    }

    pub fn state(mut self, v: Byte) -> Self {
        self.state = v;
        self
    }
}
impl molecule::prelude::Builder for OwnedCompactNFTValueBuilder {
    type Entity = OwnedCompactNFTValue;

    const NAME: &'static str = "OwnedCompactNFTValueBuilder";

    fn expected_length(&self) -> usize {
        Self::TOTAL_SIZE
    }

    fn write<W: molecule::io::Write>(&self, writer: &mut W) -> molecule::io::Result<()> {
        writer.write_all(self.characteristic.as_slice())?;
        writer.write_all(self.configure.as_slice())?;
        writer.write_all(self.state.as_slice())?;
        Ok(())
    }

    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        OwnedCompactNFTValue::new_unchecked(inner.into())
    }
}
#[derive(Clone)]
pub struct OwnedCompactNFTValueVec(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for OwnedCompactNFTValueVec {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for OwnedCompactNFTValueVec {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for OwnedCompactNFTValueVec {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} [", Self::NAME)?;
        for i in 0..self.len() {
            if i == 0 {
                write!(f, "{}", self.get_unchecked(i))?;
            } else {
                write!(f, ", {}", self.get_unchecked(i))?;
            }
        }
        write!(f, "]")
    }
}
impl ::core::default::Default for OwnedCompactNFTValueVec {
    fn default() -> Self {
        let v: Vec<u8> = vec![0, 0, 0, 0];
        OwnedCompactNFTValueVec::new_unchecked(v.into())
    }
}
impl OwnedCompactNFTValueVec {
    pub const ITEM_SIZE: usize = 10;

    pub fn total_size(&self) -> usize {
        molecule::NUMBER_SIZE * (self.item_count() + 1)
    }

    pub fn item_count(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }

    pub fn len(&self) -> usize {
        self.item_count()
    }

    pub fn is_empty(&self) -> bool {
        self.len() == 0
    }

    pub fn get(&self, idx: usize) -> Option<OwnedCompactNFTValue> {
        if idx >= self.len() {
            None
        } else {
            Some(self.get_unchecked(idx))
        }
    }

    pub fn get_unchecked(&self, idx: usize) -> OwnedCompactNFTValue {
        let start = molecule::NUMBER_SIZE + Self::ITEM_SIZE * idx;
        let end = start + Self::ITEM_SIZE;
        OwnedCompactNFTValue::new_unchecked(self.0.slice(start..end))
    }

    pub fn as_reader<'r>(&'r self) -> OwnedCompactNFTValueVecReader<'r> {
        OwnedCompactNFTValueVecReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for OwnedCompactNFTValueVec {
    type Builder = OwnedCompactNFTValueVecBuilder;

    const NAME: &'static str = "OwnedCompactNFTValueVec";

    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        OwnedCompactNFTValueVec(data)
    }

    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }

    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }

    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        OwnedCompactNFTValueVecReader::from_slice(slice).map(|reader| reader.to_entity())
    }

    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        OwnedCompactNFTValueVecReader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }

    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }

    fn as_builder(self) -> Self::Builder {
        Self::new_builder().extend(self.into_iter())
    }
}
#[derive(Clone, Copy)]
pub struct OwnedCompactNFTValueVecReader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for OwnedCompactNFTValueVecReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for OwnedCompactNFTValueVecReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for OwnedCompactNFTValueVecReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} [", Self::NAME)?;
        for i in 0..self.len() {
            if i == 0 {
                write!(f, "{}", self.get_unchecked(i))?;
            } else {
                write!(f, ", {}", self.get_unchecked(i))?;
            }
        }
        write!(f, "]")
    }
}
impl<'r> OwnedCompactNFTValueVecReader<'r> {
    pub const ITEM_SIZE: usize = 10;

    pub fn total_size(&self) -> usize {
        molecule::NUMBER_SIZE * (self.item_count() + 1)
    }

    pub fn item_count(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }

    pub fn len(&self) -> usize {
        self.item_count()
    }

    pub fn is_empty(&self) -> bool {
        self.len() == 0
    }

    pub fn get(&self, idx: usize) -> Option<OwnedCompactNFTValueReader<'r>> {
        if idx >= self.len() {
            None
        } else {
            Some(self.get_unchecked(idx))
        }
    }

    pub fn get_unchecked(&self, idx: usize) -> OwnedCompactNFTValueReader<'r> {
        let start = molecule::NUMBER_SIZE + Self::ITEM_SIZE * idx;
        let end = start + Self::ITEM_SIZE;
        OwnedCompactNFTValueReader::new_unchecked(&self.as_slice()[start..end])
    }
}
impl<'r> molecule::prelude::Reader<'r> for OwnedCompactNFTValueVecReader<'r> {
    type Entity = OwnedCompactNFTValueVec;

    const NAME: &'static str = "OwnedCompactNFTValueVecReader";

    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().to_owned().into())
    }

    fn new_unchecked(slice: &'r [u8]) -> Self {
        OwnedCompactNFTValueVecReader(slice)
    }

    fn as_slice(&self) -> &'r [u8] {
        self.0
    }

    fn verify(slice: &[u8], _compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len < molecule::NUMBER_SIZE {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE, slice_len);
        }
        let item_count = molecule::unpack_number(slice) as usize;
        if item_count == 0 {
            if slice_len != molecule::NUMBER_SIZE {
                return ve!(Self, TotalSizeNotMatch, molecule::NUMBER_SIZE, slice_len);
            }
            return Ok(());
        }
        let total_size = molecule::NUMBER_SIZE + Self::ITEM_SIZE * item_count;
        if slice_len != total_size {
            return ve!(Self, TotalSizeNotMatch, total_size, slice_len);
        }
        Ok(())
    }
}
#[derive(Debug, Default)]
pub struct OwnedCompactNFTValueVecBuilder(pub(crate) Vec<OwnedCompactNFTValue>);
impl OwnedCompactNFTValueVecBuilder {
    pub const ITEM_SIZE: usize = 10;

    pub fn set(mut self, v: Vec<OwnedCompactNFTValue>) -> Self {
        self.0 = v;
        self
    }

    pub fn push(mut self, v: OwnedCompactNFTValue) -> Self {
        self.0.push(v);
        self
    }

    pub fn extend<T: ::core::iter::IntoIterator<Item = OwnedCompactNFTValue>>(
        mut self,
        iter: T,
    ) -> Self {
        for elem in iter {
            self.0.push(elem);
        }
        self
    }
}
impl molecule::prelude::Builder for OwnedCompactNFTValueVecBuilder {
    type Entity = OwnedCompactNFTValueVec;

    const NAME: &'static str = "OwnedCompactNFTValueVecBuilder";

    fn expected_length(&self) -> usize {
        molecule::NUMBER_SIZE + Self::ITEM_SIZE * self.0.len()
    }

    fn write<W: molecule::io::Write>(&self, writer: &mut W) -> molecule::io::Result<()> {
        writer.write_all(&molecule::pack_number(self.0.len() as molecule::Number))?;
        for inner in &self.0[..] {
            writer.write_all(inner.as_slice())?;
        }
        Ok(())
    }

    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        OwnedCompactNFTValueVec::new_unchecked(inner.into())
    }
}
pub struct OwnedCompactNFTValueVecIterator(OwnedCompactNFTValueVec, usize, usize);
impl ::core::iter::Iterator for OwnedCompactNFTValueVecIterator {
    type Item = OwnedCompactNFTValue;

    fn next(&mut self) -> Option<Self::Item> {
        if self.1 >= self.2 {
            None
        } else {
            let ret = self.0.get_unchecked(self.1);
            self.1 += 1;
            Some(ret)
        }
    }
}
impl ::core::iter::ExactSizeIterator for OwnedCompactNFTValueVecIterator {
    fn len(&self) -> usize {
        self.2 - self.1
    }
}
impl ::core::iter::IntoIterator for OwnedCompactNFTValueVec {
    type IntoIter = OwnedCompactNFTValueVecIterator;
    type Item = OwnedCompactNFTValue;

    fn into_iter(self) -> Self::IntoIter {
        let len = self.len();
        OwnedCompactNFTValueVecIterator(self, 0, len)
    }
}
impl<'r> OwnedCompactNFTValueVecReader<'r> {
    pub fn iter<'t>(&'t self) -> OwnedCompactNFTValueVecReaderIterator<'t, 'r> {
        OwnedCompactNFTValueVecReaderIterator(&self, 0, self.len())
    }
}
pub struct OwnedCompactNFTValueVecReaderIterator<'t, 'r>(
    &'t OwnedCompactNFTValueVecReader<'r>,
    usize,
    usize,
);
impl<'t: 'r, 'r> ::core::iter::Iterator for OwnedCompactNFTValueVecReaderIterator<'t, 'r> {
    type Item = OwnedCompactNFTValueReader<'t>;

    fn next(&mut self) -> Option<Self::Item> {
        if self.1 >= self.2 {
            None
        } else {
            let ret = self.0.get_unchecked(self.1);
            self.1 += 1;
            Some(ret)
        }
    }
}
impl<'t: 'r, 'r> ::core::iter::ExactSizeIterator for OwnedCompactNFTValueVecReaderIterator<'t, 'r> {
    fn len(&self) -> usize {
        self.2 - self.1
    }
}
#[derive(Clone)]
pub struct ClaimedCompactNFTKey(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for ClaimedCompactNFTKey {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for ClaimedCompactNFTKey {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for ClaimedCompactNFTKey {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "smt_type", self.smt_type())?;
        write!(f, ", {}: {}", "out_point", self.out_point())?;
        write!(f, " }}")
    }
}
impl ::core::default::Default for ClaimedCompactNFTKey {
    fn default() -> Self {
        let v: Vec<u8> = vec![
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
        ];
        ClaimedCompactNFTKey::new_unchecked(v.into())
    }
}
impl ClaimedCompactNFTKey {
    pub const FIELD_COUNT: usize = 2;
    pub const FIELD_SIZES: [usize; 2] = [1, 36];
    pub const TOTAL_SIZE: usize = 37;

    pub fn smt_type(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(0..1))
    }

    pub fn out_point(&self) -> OutPoint {
        OutPoint::new_unchecked(self.0.slice(1..37))
    }

    pub fn as_reader<'r>(&'r self) -> ClaimedCompactNFTKeyReader<'r> {
        ClaimedCompactNFTKeyReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for ClaimedCompactNFTKey {
    type Builder = ClaimedCompactNFTKeyBuilder;

    const NAME: &'static str = "ClaimedCompactNFTKey";

    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        ClaimedCompactNFTKey(data)
    }

    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }

    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }

    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        ClaimedCompactNFTKeyReader::from_slice(slice).map(|reader| reader.to_entity())
    }

    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        ClaimedCompactNFTKeyReader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }

    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }

    fn as_builder(self) -> Self::Builder {
        Self::new_builder()
            .smt_type(self.smt_type())
            .out_point(self.out_point())
    }
}
#[derive(Clone, Copy)]
pub struct ClaimedCompactNFTKeyReader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for ClaimedCompactNFTKeyReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for ClaimedCompactNFTKeyReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for ClaimedCompactNFTKeyReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "smt_type", self.smt_type())?;
        write!(f, ", {}: {}", "out_point", self.out_point())?;
        write!(f, " }}")
    }
}
impl<'r> ClaimedCompactNFTKeyReader<'r> {
    pub const FIELD_COUNT: usize = 2;
    pub const FIELD_SIZES: [usize; 2] = [1, 36];
    pub const TOTAL_SIZE: usize = 37;

    pub fn smt_type(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[0..1])
    }

    pub fn out_point(&self) -> OutPointReader<'r> {
        OutPointReader::new_unchecked(&self.as_slice()[1..37])
    }
}
impl<'r> molecule::prelude::Reader<'r> for ClaimedCompactNFTKeyReader<'r> {
    type Entity = ClaimedCompactNFTKey;

    const NAME: &'static str = "ClaimedCompactNFTKeyReader";

    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().to_owned().into())
    }

    fn new_unchecked(slice: &'r [u8]) -> Self {
        ClaimedCompactNFTKeyReader(slice)
    }

    fn as_slice(&self) -> &'r [u8] {
        self.0
    }

    fn verify(slice: &[u8], _compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len != Self::TOTAL_SIZE {
            return ve!(Self, TotalSizeNotMatch, Self::TOTAL_SIZE, slice_len);
        }
        Ok(())
    }
}
#[derive(Debug, Default)]
pub struct ClaimedCompactNFTKeyBuilder {
    pub(crate) smt_type:  Byte,
    pub(crate) out_point: OutPoint,
}
impl ClaimedCompactNFTKeyBuilder {
    pub const FIELD_COUNT: usize = 2;
    pub const FIELD_SIZES: [usize; 2] = [1, 36];
    pub const TOTAL_SIZE: usize = 37;

    pub fn smt_type(mut self, v: Byte) -> Self {
        self.smt_type = v;
        self
    }

    pub fn out_point(mut self, v: OutPoint) -> Self {
        self.out_point = v;
        self
    }
}
impl molecule::prelude::Builder for ClaimedCompactNFTKeyBuilder {
    type Entity = ClaimedCompactNFTKey;

    const NAME: &'static str = "ClaimedCompactNFTKeyBuilder";

    fn expected_length(&self) -> usize {
        Self::TOTAL_SIZE
    }

    fn write<W: molecule::io::Write>(&self, writer: &mut W) -> molecule::io::Result<()> {
        writer.write_all(self.smt_type.as_slice())?;
        writer.write_all(self.out_point.as_slice())?;
        Ok(())
    }

    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        ClaimedCompactNFTKey::new_unchecked(inner.into())
    }
}
#[derive(Clone)]
pub struct ClaimedCompactNFTKeyVec(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for ClaimedCompactNFTKeyVec {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for ClaimedCompactNFTKeyVec {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for ClaimedCompactNFTKeyVec {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} [", Self::NAME)?;
        for i in 0..self.len() {
            if i == 0 {
                write!(f, "{}", self.get_unchecked(i))?;
            } else {
                write!(f, ", {}", self.get_unchecked(i))?;
            }
        }
        write!(f, "]")
    }
}
impl ::core::default::Default for ClaimedCompactNFTKeyVec {
    fn default() -> Self {
        let v: Vec<u8> = vec![0, 0, 0, 0];
        ClaimedCompactNFTKeyVec::new_unchecked(v.into())
    }
}
impl ClaimedCompactNFTKeyVec {
    pub const ITEM_SIZE: usize = 37;

    pub fn total_size(&self) -> usize {
        molecule::NUMBER_SIZE * (self.item_count() + 1)
    }

    pub fn item_count(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }

    pub fn len(&self) -> usize {
        self.item_count()
    }

    pub fn is_empty(&self) -> bool {
        self.len() == 0
    }

    pub fn get(&self, idx: usize) -> Option<ClaimedCompactNFTKey> {
        if idx >= self.len() {
            None
        } else {
            Some(self.get_unchecked(idx))
        }
    }

    pub fn get_unchecked(&self, idx: usize) -> ClaimedCompactNFTKey {
        let start = molecule::NUMBER_SIZE + Self::ITEM_SIZE * idx;
        let end = start + Self::ITEM_SIZE;
        ClaimedCompactNFTKey::new_unchecked(self.0.slice(start..end))
    }

    pub fn as_reader<'r>(&'r self) -> ClaimedCompactNFTKeyVecReader<'r> {
        ClaimedCompactNFTKeyVecReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for ClaimedCompactNFTKeyVec {
    type Builder = ClaimedCompactNFTKeyVecBuilder;

    const NAME: &'static str = "ClaimedCompactNFTKeyVec";

    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        ClaimedCompactNFTKeyVec(data)
    }

    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }

    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }

    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        ClaimedCompactNFTKeyVecReader::from_slice(slice).map(|reader| reader.to_entity())
    }

    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        ClaimedCompactNFTKeyVecReader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }

    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }

    fn as_builder(self) -> Self::Builder {
        Self::new_builder().extend(self.into_iter())
    }
}
#[derive(Clone, Copy)]
pub struct ClaimedCompactNFTKeyVecReader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for ClaimedCompactNFTKeyVecReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for ClaimedCompactNFTKeyVecReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for ClaimedCompactNFTKeyVecReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} [", Self::NAME)?;
        for i in 0..self.len() {
            if i == 0 {
                write!(f, "{}", self.get_unchecked(i))?;
            } else {
                write!(f, ", {}", self.get_unchecked(i))?;
            }
        }
        write!(f, "]")
    }
}
impl<'r> ClaimedCompactNFTKeyVecReader<'r> {
    pub const ITEM_SIZE: usize = 37;

    pub fn total_size(&self) -> usize {
        molecule::NUMBER_SIZE * (self.item_count() + 1)
    }

    pub fn item_count(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }

    pub fn len(&self) -> usize {
        self.item_count()
    }

    pub fn is_empty(&self) -> bool {
        self.len() == 0
    }

    pub fn get(&self, idx: usize) -> Option<ClaimedCompactNFTKeyReader<'r>> {
        if idx >= self.len() {
            None
        } else {
            Some(self.get_unchecked(idx))
        }
    }

    pub fn get_unchecked(&self, idx: usize) -> ClaimedCompactNFTKeyReader<'r> {
        let start = molecule::NUMBER_SIZE + Self::ITEM_SIZE * idx;
        let end = start + Self::ITEM_SIZE;
        ClaimedCompactNFTKeyReader::new_unchecked(&self.as_slice()[start..end])
    }
}
impl<'r> molecule::prelude::Reader<'r> for ClaimedCompactNFTKeyVecReader<'r> {
    type Entity = ClaimedCompactNFTKeyVec;

    const NAME: &'static str = "ClaimedCompactNFTKeyVecReader";

    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().to_owned().into())
    }

    fn new_unchecked(slice: &'r [u8]) -> Self {
        ClaimedCompactNFTKeyVecReader(slice)
    }

    fn as_slice(&self) -> &'r [u8] {
        self.0
    }

    fn verify(slice: &[u8], _compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len < molecule::NUMBER_SIZE {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE, slice_len);
        }
        let item_count = molecule::unpack_number(slice) as usize;
        if item_count == 0 {
            if slice_len != molecule::NUMBER_SIZE {
                return ve!(Self, TotalSizeNotMatch, molecule::NUMBER_SIZE, slice_len);
            }
            return Ok(());
        }
        let total_size = molecule::NUMBER_SIZE + Self::ITEM_SIZE * item_count;
        if slice_len != total_size {
            return ve!(Self, TotalSizeNotMatch, total_size, slice_len);
        }
        Ok(())
    }
}
#[derive(Debug, Default)]
pub struct ClaimedCompactNFTKeyVecBuilder(pub(crate) Vec<ClaimedCompactNFTKey>);
impl ClaimedCompactNFTKeyVecBuilder {
    pub const ITEM_SIZE: usize = 37;

    pub fn set(mut self, v: Vec<ClaimedCompactNFTKey>) -> Self {
        self.0 = v;
        self
    }

    pub fn push(mut self, v: ClaimedCompactNFTKey) -> Self {
        self.0.push(v);
        self
    }

    pub fn extend<T: ::core::iter::IntoIterator<Item = ClaimedCompactNFTKey>>(
        mut self,
        iter: T,
    ) -> Self {
        for elem in iter {
            self.0.push(elem);
        }
        self
    }
}
impl molecule::prelude::Builder for ClaimedCompactNFTKeyVecBuilder {
    type Entity = ClaimedCompactNFTKeyVec;

    const NAME: &'static str = "ClaimedCompactNFTKeyVecBuilder";

    fn expected_length(&self) -> usize {
        molecule::NUMBER_SIZE + Self::ITEM_SIZE * self.0.len()
    }

    fn write<W: molecule::io::Write>(&self, writer: &mut W) -> molecule::io::Result<()> {
        writer.write_all(&molecule::pack_number(self.0.len() as molecule::Number))?;
        for inner in &self.0[..] {
            writer.write_all(inner.as_slice())?;
        }
        Ok(())
    }

    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        ClaimedCompactNFTKeyVec::new_unchecked(inner.into())
    }
}
pub struct ClaimedCompactNFTKeyVecIterator(ClaimedCompactNFTKeyVec, usize, usize);
impl ::core::iter::Iterator for ClaimedCompactNFTKeyVecIterator {
    type Item = ClaimedCompactNFTKey;

    fn next(&mut self) -> Option<Self::Item> {
        if self.1 >= self.2 {
            None
        } else {
            let ret = self.0.get_unchecked(self.1);
            self.1 += 1;
            Some(ret)
        }
    }
}
impl ::core::iter::ExactSizeIterator for ClaimedCompactNFTKeyVecIterator {
    fn len(&self) -> usize {
        self.2 - self.1
    }
}
impl ::core::iter::IntoIterator for ClaimedCompactNFTKeyVec {
    type IntoIter = ClaimedCompactNFTKeyVecIterator;
    type Item = ClaimedCompactNFTKey;

    fn into_iter(self) -> Self::IntoIter {
        let len = self.len();
        ClaimedCompactNFTKeyVecIterator(self, 0, len)
    }
}
impl<'r> ClaimedCompactNFTKeyVecReader<'r> {
    pub fn iter<'t>(&'t self) -> ClaimedCompactNFTKeyVecReaderIterator<'t, 'r> {
        ClaimedCompactNFTKeyVecReaderIterator(&self, 0, self.len())
    }
}
pub struct ClaimedCompactNFTKeyVecReaderIterator<'t, 'r>(
    &'t ClaimedCompactNFTKeyVecReader<'r>,
    usize,
    usize,
);
impl<'t: 'r, 'r> ::core::iter::Iterator for ClaimedCompactNFTKeyVecReaderIterator<'t, 'r> {
    type Item = ClaimedCompactNFTKeyReader<'t>;

    fn next(&mut self) -> Option<Self::Item> {
        if self.1 >= self.2 {
            None
        } else {
            let ret = self.0.get_unchecked(self.1);
            self.1 += 1;
            Some(ret)
        }
    }
}
impl<'t: 'r, 'r> ::core::iter::ExactSizeIterator for ClaimedCompactNFTKeyVecReaderIterator<'t, 'r> {
    fn len(&self) -> usize {
        self.2 - self.1
    }
}
#[derive(Clone)]
pub struct ClaimedCommpactNFTValueVec(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for ClaimedCommpactNFTValueVec {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for ClaimedCommpactNFTValueVec {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for ClaimedCommpactNFTValueVec {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} [", Self::NAME)?;
        for i in 0..self.len() {
            if i == 0 {
                write!(f, "{}", self.get_unchecked(i))?;
            } else {
                write!(f, ", {}", self.get_unchecked(i))?;
            }
        }
        write!(f, "]")
    }
}
impl ::core::default::Default for ClaimedCommpactNFTValueVec {
    fn default() -> Self {
        let v: Vec<u8> = vec![0, 0, 0, 0];
        ClaimedCommpactNFTValueVec::new_unchecked(v.into())
    }
}
impl ClaimedCommpactNFTValueVec {
    pub const ITEM_SIZE: usize = 32;

    pub fn total_size(&self) -> usize {
        molecule::NUMBER_SIZE * (self.item_count() + 1)
    }

    pub fn item_count(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }

    pub fn len(&self) -> usize {
        self.item_count()
    }

    pub fn is_empty(&self) -> bool {
        self.len() == 0
    }

    pub fn get(&self, idx: usize) -> Option<Byte32> {
        if idx >= self.len() {
            None
        } else {
            Some(self.get_unchecked(idx))
        }
    }

    pub fn get_unchecked(&self, idx: usize) -> Byte32 {
        let start = molecule::NUMBER_SIZE + Self::ITEM_SIZE * idx;
        let end = start + Self::ITEM_SIZE;
        Byte32::new_unchecked(self.0.slice(start..end))
    }

    pub fn as_reader<'r>(&'r self) -> ClaimedCommpactNFTValueVecReader<'r> {
        ClaimedCommpactNFTValueVecReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for ClaimedCommpactNFTValueVec {
    type Builder = ClaimedCommpactNFTValueVecBuilder;

    const NAME: &'static str = "ClaimedCommpactNFTValueVec";

    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        ClaimedCommpactNFTValueVec(data)
    }

    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }

    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }

    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        ClaimedCommpactNFTValueVecReader::from_slice(slice).map(|reader| reader.to_entity())
    }

    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        ClaimedCommpactNFTValueVecReader::from_compatible_slice(slice)
            .map(|reader| reader.to_entity())
    }

    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }

    fn as_builder(self) -> Self::Builder {
        Self::new_builder().extend(self.into_iter())
    }
}
#[derive(Clone, Copy)]
pub struct ClaimedCommpactNFTValueVecReader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for ClaimedCommpactNFTValueVecReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for ClaimedCommpactNFTValueVecReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for ClaimedCommpactNFTValueVecReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} [", Self::NAME)?;
        for i in 0..self.len() {
            if i == 0 {
                write!(f, "{}", self.get_unchecked(i))?;
            } else {
                write!(f, ", {}", self.get_unchecked(i))?;
            }
        }
        write!(f, "]")
    }
}
impl<'r> ClaimedCommpactNFTValueVecReader<'r> {
    pub const ITEM_SIZE: usize = 32;

    pub fn total_size(&self) -> usize {
        molecule::NUMBER_SIZE * (self.item_count() + 1)
    }

    pub fn item_count(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }

    pub fn len(&self) -> usize {
        self.item_count()
    }

    pub fn is_empty(&self) -> bool {
        self.len() == 0
    }

    pub fn get(&self, idx: usize) -> Option<Byte32Reader<'r>> {
        if idx >= self.len() {
            None
        } else {
            Some(self.get_unchecked(idx))
        }
    }

    pub fn get_unchecked(&self, idx: usize) -> Byte32Reader<'r> {
        let start = molecule::NUMBER_SIZE + Self::ITEM_SIZE * idx;
        let end = start + Self::ITEM_SIZE;
        Byte32Reader::new_unchecked(&self.as_slice()[start..end])
    }
}
impl<'r> molecule::prelude::Reader<'r> for ClaimedCommpactNFTValueVecReader<'r> {
    type Entity = ClaimedCommpactNFTValueVec;

    const NAME: &'static str = "ClaimedCommpactNFTValueVecReader";

    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().to_owned().into())
    }

    fn new_unchecked(slice: &'r [u8]) -> Self {
        ClaimedCommpactNFTValueVecReader(slice)
    }

    fn as_slice(&self) -> &'r [u8] {
        self.0
    }

    fn verify(slice: &[u8], _compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len < molecule::NUMBER_SIZE {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE, slice_len);
        }
        let item_count = molecule::unpack_number(slice) as usize;
        if item_count == 0 {
            if slice_len != molecule::NUMBER_SIZE {
                return ve!(Self, TotalSizeNotMatch, molecule::NUMBER_SIZE, slice_len);
            }
            return Ok(());
        }
        let total_size = molecule::NUMBER_SIZE + Self::ITEM_SIZE * item_count;
        if slice_len != total_size {
            return ve!(Self, TotalSizeNotMatch, total_size, slice_len);
        }
        Ok(())
    }
}
#[derive(Debug, Default)]
pub struct ClaimedCommpactNFTValueVecBuilder(pub(crate) Vec<Byte32>);
impl ClaimedCommpactNFTValueVecBuilder {
    pub const ITEM_SIZE: usize = 32;

    pub fn set(mut self, v: Vec<Byte32>) -> Self {
        self.0 = v;
        self
    }

    pub fn push(mut self, v: Byte32) -> Self {
        self.0.push(v);
        self
    }

    pub fn extend<T: ::core::iter::IntoIterator<Item = Byte32>>(mut self, iter: T) -> Self {
        for elem in iter {
            self.0.push(elem);
        }
        self
    }
}
impl molecule::prelude::Builder for ClaimedCommpactNFTValueVecBuilder {
    type Entity = ClaimedCommpactNFTValueVec;

    const NAME: &'static str = "ClaimedCommpactNFTValueVecBuilder";

    fn expected_length(&self) -> usize {
        molecule::NUMBER_SIZE + Self::ITEM_SIZE * self.0.len()
    }

    fn write<W: molecule::io::Write>(&self, writer: &mut W) -> molecule::io::Result<()> {
        writer.write_all(&molecule::pack_number(self.0.len() as molecule::Number))?;
        for inner in &self.0[..] {
            writer.write_all(inner.as_slice())?;
        }
        Ok(())
    }

    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        ClaimedCommpactNFTValueVec::new_unchecked(inner.into())
    }
}
pub struct ClaimedCommpactNFTValueVecIterator(ClaimedCommpactNFTValueVec, usize, usize);
impl ::core::iter::Iterator for ClaimedCommpactNFTValueVecIterator {
    type Item = Byte32;

    fn next(&mut self) -> Option<Self::Item> {
        if self.1 >= self.2 {
            None
        } else {
            let ret = self.0.get_unchecked(self.1);
            self.1 += 1;
            Some(ret)
        }
    }
}
impl ::core::iter::ExactSizeIterator for ClaimedCommpactNFTValueVecIterator {
    fn len(&self) -> usize {
        self.2 - self.1
    }
}
impl ::core::iter::IntoIterator for ClaimedCommpactNFTValueVec {
    type IntoIter = ClaimedCommpactNFTValueVecIterator;
    type Item = Byte32;

    fn into_iter(self) -> Self::IntoIter {
        let len = self.len();
        ClaimedCommpactNFTValueVecIterator(self, 0, len)
    }
}
impl<'r> ClaimedCommpactNFTValueVecReader<'r> {
    pub fn iter<'t>(&'t self) -> ClaimedCommpactNFTValueVecReaderIterator<'t, 'r> {
        ClaimedCommpactNFTValueVecReaderIterator(&self, 0, self.len())
    }
}
pub struct ClaimedCommpactNFTValueVecReaderIterator<'t, 'r>(
    &'t ClaimedCommpactNFTValueVecReader<'r>,
    usize,
    usize,
);
impl<'t: 'r, 'r> ::core::iter::Iterator for ClaimedCommpactNFTValueVecReaderIterator<'t, 'r> {
    type Item = Byte32Reader<'t>;

    fn next(&mut self) -> Option<Self::Item> {
        if self.1 >= self.2 {
            None
        } else {
            let ret = self.0.get_unchecked(self.1);
            self.1 += 1;
            Some(ret)
        }
    }
}
impl<'t: 'r, 'r> ::core::iter::ExactSizeIterator
    for ClaimedCommpactNFTValueVecReaderIterator<'t, 'r>
{
    fn len(&self) -> usize {
        self.2 - self.1
    }
}
#[derive(Clone)]
pub struct WithdrawCompactNFTValue(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for WithdrawCompactNFTValue {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for WithdrawCompactNFTValue {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for WithdrawCompactNFTValue {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "characteristic", self.characteristic())?;
        write!(f, ", {}: {}", "configure", self.configure())?;
        write!(f, ", {}: {}", "state", self.state())?;
        write!(f, ", {}: {}", "to", self.to())?;
        write!(f, ", {}: {}", "out_point", self.out_point())?;
        write!(f, " }}")
    }
}
impl ::core::default::Default for WithdrawCompactNFTValue {
    fn default() -> Self {
        let v: Vec<u8> = vec![
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
        ];
        WithdrawCompactNFTValue::new_unchecked(v.into())
    }
}
impl WithdrawCompactNFTValue {
    pub const FIELD_COUNT: usize = 5;
    pub const FIELD_SIZES: [usize; 5] = [8, 1, 1, 20, 36];
    pub const TOTAL_SIZE: usize = 66;

    pub fn characteristic(&self) -> Characteristic {
        Characteristic::new_unchecked(self.0.slice(0..8))
    }

    pub fn configure(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(8..9))
    }

    pub fn state(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(9..10))
    }

    pub fn to(&self) -> LockHash {
        LockHash::new_unchecked(self.0.slice(10..30))
    }

    pub fn out_point(&self) -> OutPoint {
        OutPoint::new_unchecked(self.0.slice(30..66))
    }

    pub fn as_reader<'r>(&'r self) -> WithdrawCompactNFTValueReader<'r> {
        WithdrawCompactNFTValueReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for WithdrawCompactNFTValue {
    type Builder = WithdrawCompactNFTValueBuilder;

    const NAME: &'static str = "WithdrawCompactNFTValue";

    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        WithdrawCompactNFTValue(data)
    }

    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }

    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }

    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        WithdrawCompactNFTValueReader::from_slice(slice).map(|reader| reader.to_entity())
    }

    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        WithdrawCompactNFTValueReader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }

    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }

    fn as_builder(self) -> Self::Builder {
        Self::new_builder()
            .characteristic(self.characteristic())
            .configure(self.configure())
            .state(self.state())
            .to(self.to())
            .out_point(self.out_point())
    }
}
#[derive(Clone, Copy)]
pub struct WithdrawCompactNFTValueReader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for WithdrawCompactNFTValueReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for WithdrawCompactNFTValueReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for WithdrawCompactNFTValueReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "characteristic", self.characteristic())?;
        write!(f, ", {}: {}", "configure", self.configure())?;
        write!(f, ", {}: {}", "state", self.state())?;
        write!(f, ", {}: {}", "to", self.to())?;
        write!(f, ", {}: {}", "out_point", self.out_point())?;
        write!(f, " }}")
    }
}
impl<'r> WithdrawCompactNFTValueReader<'r> {
    pub const FIELD_COUNT: usize = 5;
    pub const FIELD_SIZES: [usize; 5] = [8, 1, 1, 20, 36];
    pub const TOTAL_SIZE: usize = 66;

    pub fn characteristic(&self) -> CharacteristicReader<'r> {
        CharacteristicReader::new_unchecked(&self.as_slice()[0..8])
    }

    pub fn configure(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[8..9])
    }

    pub fn state(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[9..10])
    }

    pub fn to(&self) -> LockHashReader<'r> {
        LockHashReader::new_unchecked(&self.as_slice()[10..30])
    }

    pub fn out_point(&self) -> OutPointReader<'r> {
        OutPointReader::new_unchecked(&self.as_slice()[30..66])
    }
}
impl<'r> molecule::prelude::Reader<'r> for WithdrawCompactNFTValueReader<'r> {
    type Entity = WithdrawCompactNFTValue;

    const NAME: &'static str = "WithdrawCompactNFTValueReader";

    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().to_owned().into())
    }

    fn new_unchecked(slice: &'r [u8]) -> Self {
        WithdrawCompactNFTValueReader(slice)
    }

    fn as_slice(&self) -> &'r [u8] {
        self.0
    }

    fn verify(slice: &[u8], _compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len != Self::TOTAL_SIZE {
            return ve!(Self, TotalSizeNotMatch, Self::TOTAL_SIZE, slice_len);
        }
        Ok(())
    }
}
#[derive(Debug, Default)]
pub struct WithdrawCompactNFTValueBuilder {
    pub(crate) characteristic: Characteristic,
    pub(crate) configure:      Byte,
    pub(crate) state:          Byte,
    pub(crate) to:             LockHash,
    pub(crate) out_point:      OutPoint,
}
impl WithdrawCompactNFTValueBuilder {
    pub const FIELD_COUNT: usize = 5;
    pub const FIELD_SIZES: [usize; 5] = [8, 1, 1, 20, 36];
    pub const TOTAL_SIZE: usize = 66;

    pub fn characteristic(mut self, v: Characteristic) -> Self {
        self.characteristic = v;
        self
    }

    pub fn configure(mut self, v: Byte) -> Self {
        self.configure = v;
        self
    }

    pub fn state(mut self, v: Byte) -> Self {
        self.state = v;
        self
    }

    pub fn to(mut self, v: LockHash) -> Self {
        self.to = v;
        self
    }

    pub fn out_point(mut self, v: OutPoint) -> Self {
        self.out_point = v;
        self
    }
}
impl molecule::prelude::Builder for WithdrawCompactNFTValueBuilder {
    type Entity = WithdrawCompactNFTValue;

    const NAME: &'static str = "WithdrawCompactNFTValueBuilder";

    fn expected_length(&self) -> usize {
        Self::TOTAL_SIZE
    }

    fn write<W: molecule::io::Write>(&self, writer: &mut W) -> molecule::io::Result<()> {
        writer.write_all(self.characteristic.as_slice())?;
        writer.write_all(self.configure.as_slice())?;
        writer.write_all(self.state.as_slice())?;
        writer.write_all(self.to.as_slice())?;
        writer.write_all(self.out_point.as_slice())?;
        Ok(())
    }

    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        WithdrawCompactNFTValue::new_unchecked(inner.into())
    }
}
#[derive(Clone)]
pub struct WithdrawCompactNFTValueVec(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for WithdrawCompactNFTValueVec {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for WithdrawCompactNFTValueVec {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for WithdrawCompactNFTValueVec {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} [", Self::NAME)?;
        for i in 0..self.len() {
            if i == 0 {
                write!(f, "{}", self.get_unchecked(i))?;
            } else {
                write!(f, ", {}", self.get_unchecked(i))?;
            }
        }
        write!(f, "]")
    }
}
impl ::core::default::Default for WithdrawCompactNFTValueVec {
    fn default() -> Self {
        let v: Vec<u8> = vec![0, 0, 0, 0];
        WithdrawCompactNFTValueVec::new_unchecked(v.into())
    }
}
impl WithdrawCompactNFTValueVec {
    pub const ITEM_SIZE: usize = 66;

    pub fn total_size(&self) -> usize {
        molecule::NUMBER_SIZE * (self.item_count() + 1)
    }

    pub fn item_count(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }

    pub fn len(&self) -> usize {
        self.item_count()
    }

    pub fn is_empty(&self) -> bool {
        self.len() == 0
    }

    pub fn get(&self, idx: usize) -> Option<WithdrawCompactNFTValue> {
        if idx >= self.len() {
            None
        } else {
            Some(self.get_unchecked(idx))
        }
    }

    pub fn get_unchecked(&self, idx: usize) -> WithdrawCompactNFTValue {
        let start = molecule::NUMBER_SIZE + Self::ITEM_SIZE * idx;
        let end = start + Self::ITEM_SIZE;
        WithdrawCompactNFTValue::new_unchecked(self.0.slice(start..end))
    }

    pub fn as_reader<'r>(&'r self) -> WithdrawCompactNFTValueVecReader<'r> {
        WithdrawCompactNFTValueVecReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for WithdrawCompactNFTValueVec {
    type Builder = WithdrawCompactNFTValueVecBuilder;

    const NAME: &'static str = "WithdrawCompactNFTValueVec";

    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        WithdrawCompactNFTValueVec(data)
    }

    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }

    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }

    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        WithdrawCompactNFTValueVecReader::from_slice(slice).map(|reader| reader.to_entity())
    }

    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        WithdrawCompactNFTValueVecReader::from_compatible_slice(slice)
            .map(|reader| reader.to_entity())
    }

    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }

    fn as_builder(self) -> Self::Builder {
        Self::new_builder().extend(self.into_iter())
    }
}
#[derive(Clone, Copy)]
pub struct WithdrawCompactNFTValueVecReader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for WithdrawCompactNFTValueVecReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for WithdrawCompactNFTValueVecReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for WithdrawCompactNFTValueVecReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} [", Self::NAME)?;
        for i in 0..self.len() {
            if i == 0 {
                write!(f, "{}", self.get_unchecked(i))?;
            } else {
                write!(f, ", {}", self.get_unchecked(i))?;
            }
        }
        write!(f, "]")
    }
}
impl<'r> WithdrawCompactNFTValueVecReader<'r> {
    pub const ITEM_SIZE: usize = 66;

    pub fn total_size(&self) -> usize {
        molecule::NUMBER_SIZE * (self.item_count() + 1)
    }

    pub fn item_count(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }

    pub fn len(&self) -> usize {
        self.item_count()
    }

    pub fn is_empty(&self) -> bool {
        self.len() == 0
    }

    pub fn get(&self, idx: usize) -> Option<WithdrawCompactNFTValueReader<'r>> {
        if idx >= self.len() {
            None
        } else {
            Some(self.get_unchecked(idx))
        }
    }

    pub fn get_unchecked(&self, idx: usize) -> WithdrawCompactNFTValueReader<'r> {
        let start = molecule::NUMBER_SIZE + Self::ITEM_SIZE * idx;
        let end = start + Self::ITEM_SIZE;
        WithdrawCompactNFTValueReader::new_unchecked(&self.as_slice()[start..end])
    }
}
impl<'r> molecule::prelude::Reader<'r> for WithdrawCompactNFTValueVecReader<'r> {
    type Entity = WithdrawCompactNFTValueVec;

    const NAME: &'static str = "WithdrawCompactNFTValueVecReader";

    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().to_owned().into())
    }

    fn new_unchecked(slice: &'r [u8]) -> Self {
        WithdrawCompactNFTValueVecReader(slice)
    }

    fn as_slice(&self) -> &'r [u8] {
        self.0
    }

    fn verify(slice: &[u8], _compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len < molecule::NUMBER_SIZE {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE, slice_len);
        }
        let item_count = molecule::unpack_number(slice) as usize;
        if item_count == 0 {
            if slice_len != molecule::NUMBER_SIZE {
                return ve!(Self, TotalSizeNotMatch, molecule::NUMBER_SIZE, slice_len);
            }
            return Ok(());
        }
        let total_size = molecule::NUMBER_SIZE + Self::ITEM_SIZE * item_count;
        if slice_len != total_size {
            return ve!(Self, TotalSizeNotMatch, total_size, slice_len);
        }
        Ok(())
    }
}
#[derive(Debug, Default)]
pub struct WithdrawCompactNFTValueVecBuilder(pub(crate) Vec<WithdrawCompactNFTValue>);
impl WithdrawCompactNFTValueVecBuilder {
    pub const ITEM_SIZE: usize = 66;

    pub fn set(mut self, v: Vec<WithdrawCompactNFTValue>) -> Self {
        self.0 = v;
        self
    }

    pub fn push(mut self, v: WithdrawCompactNFTValue) -> Self {
        self.0.push(v);
        self
    }

    pub fn extend<T: ::core::iter::IntoIterator<Item = WithdrawCompactNFTValue>>(
        mut self,
        iter: T,
    ) -> Self {
        for elem in iter {
            self.0.push(elem);
        }
        self
    }
}
impl molecule::prelude::Builder for WithdrawCompactNFTValueVecBuilder {
    type Entity = WithdrawCompactNFTValueVec;

    const NAME: &'static str = "WithdrawCompactNFTValueVecBuilder";

    fn expected_length(&self) -> usize {
        molecule::NUMBER_SIZE + Self::ITEM_SIZE * self.0.len()
    }

    fn write<W: molecule::io::Write>(&self, writer: &mut W) -> molecule::io::Result<()> {
        writer.write_all(&molecule::pack_number(self.0.len() as molecule::Number))?;
        for inner in &self.0[..] {
            writer.write_all(inner.as_slice())?;
        }
        Ok(())
    }

    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        WithdrawCompactNFTValueVec::new_unchecked(inner.into())
    }
}
pub struct WithdrawCompactNFTValueVecIterator(WithdrawCompactNFTValueVec, usize, usize);
impl ::core::iter::Iterator for WithdrawCompactNFTValueVecIterator {
    type Item = WithdrawCompactNFTValue;

    fn next(&mut self) -> Option<Self::Item> {
        if self.1 >= self.2 {
            None
        } else {
            let ret = self.0.get_unchecked(self.1);
            self.1 += 1;
            Some(ret)
        }
    }
}
impl ::core::iter::ExactSizeIterator for WithdrawCompactNFTValueVecIterator {
    fn len(&self) -> usize {
        self.2 - self.1
    }
}
impl ::core::iter::IntoIterator for WithdrawCompactNFTValueVec {
    type IntoIter = WithdrawCompactNFTValueVecIterator;
    type Item = WithdrawCompactNFTValue;

    fn into_iter(self) -> Self::IntoIter {
        let len = self.len();
        WithdrawCompactNFTValueVecIterator(self, 0, len)
    }
}
impl<'r> WithdrawCompactNFTValueVecReader<'r> {
    pub fn iter<'t>(&'t self) -> WithdrawCompactNFTValueVecReaderIterator<'t, 'r> {
        WithdrawCompactNFTValueVecReaderIterator(&self, 0, self.len())
    }
}
pub struct WithdrawCompactNFTValueVecReaderIterator<'t, 'r>(
    &'t WithdrawCompactNFTValueVecReader<'r>,
    usize,
    usize,
);
impl<'t: 'r, 'r> ::core::iter::Iterator for WithdrawCompactNFTValueVecReaderIterator<'t, 'r> {
    type Item = WithdrawCompactNFTValueReader<'t>;

    fn next(&mut self) -> Option<Self::Item> {
        if self.1 >= self.2 {
            None
        } else {
            let ret = self.0.get_unchecked(self.1);
            self.1 += 1;
            Some(ret)
        }
    }
}
impl<'t: 'r, 'r> ::core::iter::ExactSizeIterator
    for WithdrawCompactNFTValueVecReaderIterator<'t, 'r>
{
    fn len(&self) -> usize {
        self.2 - self.1
    }
}
#[derive(Clone)]
pub struct ClaimCompactNFTEntries(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for ClaimCompactNFTEntries {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for ClaimCompactNFTEntries {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for ClaimCompactNFTEntries {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "owned_nft_ids", self.owned_nft_ids())?;
        write!(f, ", {}: {}", "owned_nft_values", self.owned_nft_values())?;
        write!(f, ", {}: {}", "claimed_nft_keys", self.claimed_nft_keys())?;
        write!(
            f,
            ", {}: {}",
            "claimed_nft_values",
            self.claimed_nft_values()
        )?;
        write!(f, ", {}: {}", "proof", self.proof())?;
        let extra_count = self.count_extra_fields();
        if extra_count != 0 {
            write!(f, ", .. ({} fields)", extra_count)?;
        }
        write!(f, " }}")
    }
}
impl ::core::default::Default for ClaimCompactNFTEntries {
    fn default() -> Self {
        let v: Vec<u8> = vec![
            44, 0, 0, 0, 24, 0, 0, 0, 28, 0, 0, 0, 32, 0, 0, 0, 36, 0, 0, 0, 40, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        ];
        ClaimCompactNFTEntries::new_unchecked(v.into())
    }
}
impl ClaimCompactNFTEntries {
    pub const FIELD_COUNT: usize = 5;

    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }

    pub fn field_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }

    pub fn count_extra_fields(&self) -> usize {
        self.field_count() - Self::FIELD_COUNT
    }

    pub fn has_extra_fields(&self) -> bool {
        Self::FIELD_COUNT != self.field_count()
    }

    pub fn owned_nft_ids(&self) -> CompactNFTIdVec {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[4..]) as usize;
        let end = molecule::unpack_number(&slice[8..]) as usize;
        CompactNFTIdVec::new_unchecked(self.0.slice(start..end))
    }

    pub fn owned_nft_values(&self) -> OwnedCompactNFTValueVec {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[8..]) as usize;
        let end = molecule::unpack_number(&slice[12..]) as usize;
        OwnedCompactNFTValueVec::new_unchecked(self.0.slice(start..end))
    }

    pub fn claimed_nft_keys(&self) -> ClaimedCompactNFTKeyVec {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[12..]) as usize;
        let end = molecule::unpack_number(&slice[16..]) as usize;
        ClaimedCompactNFTKeyVec::new_unchecked(self.0.slice(start..end))
    }

    pub fn claimed_nft_values(&self) -> ClaimedCommpactNFTValueVec {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[16..]) as usize;
        let end = molecule::unpack_number(&slice[20..]) as usize;
        ClaimedCommpactNFTValueVec::new_unchecked(self.0.slice(start..end))
    }

    pub fn proof(&self) -> Bytes {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[20..]) as usize;
        if self.has_extra_fields() {
            let end = molecule::unpack_number(&slice[24..]) as usize;
            Bytes::new_unchecked(self.0.slice(start..end))
        } else {
            Bytes::new_unchecked(self.0.slice(start..))
        }
    }

    pub fn as_reader<'r>(&'r self) -> ClaimCompactNFTEntriesReader<'r> {
        ClaimCompactNFTEntriesReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for ClaimCompactNFTEntries {
    type Builder = ClaimCompactNFTEntriesBuilder;

    const NAME: &'static str = "ClaimCompactNFTEntries";

    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        ClaimCompactNFTEntries(data)
    }

    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }

    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }

    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        ClaimCompactNFTEntriesReader::from_slice(slice).map(|reader| reader.to_entity())
    }

    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        ClaimCompactNFTEntriesReader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }

    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }

    fn as_builder(self) -> Self::Builder {
        Self::new_builder()
            .owned_nft_ids(self.owned_nft_ids())
            .owned_nft_values(self.owned_nft_values())
            .claimed_nft_keys(self.claimed_nft_keys())
            .claimed_nft_values(self.claimed_nft_values())
            .proof(self.proof())
    }
}
#[derive(Clone, Copy)]
pub struct ClaimCompactNFTEntriesReader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for ClaimCompactNFTEntriesReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for ClaimCompactNFTEntriesReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for ClaimCompactNFTEntriesReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "owned_nft_ids", self.owned_nft_ids())?;
        write!(f, ", {}: {}", "owned_nft_values", self.owned_nft_values())?;
        write!(f, ", {}: {}", "claimed_nft_keys", self.claimed_nft_keys())?;
        write!(
            f,
            ", {}: {}",
            "claimed_nft_values",
            self.claimed_nft_values()
        )?;
        write!(f, ", {}: {}", "proof", self.proof())?;
        let extra_count = self.count_extra_fields();
        if extra_count != 0 {
            write!(f, ", .. ({} fields)", extra_count)?;
        }
        write!(f, " }}")
    }
}
impl<'r> ClaimCompactNFTEntriesReader<'r> {
    pub const FIELD_COUNT: usize = 5;

    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }

    pub fn field_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }

    pub fn count_extra_fields(&self) -> usize {
        self.field_count() - Self::FIELD_COUNT
    }

    pub fn has_extra_fields(&self) -> bool {
        Self::FIELD_COUNT != self.field_count()
    }

    pub fn owned_nft_ids(&self) -> CompactNFTIdVecReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[4..]) as usize;
        let end = molecule::unpack_number(&slice[8..]) as usize;
        CompactNFTIdVecReader::new_unchecked(&self.as_slice()[start..end])
    }

    pub fn owned_nft_values(&self) -> OwnedCompactNFTValueVecReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[8..]) as usize;
        let end = molecule::unpack_number(&slice[12..]) as usize;
        OwnedCompactNFTValueVecReader::new_unchecked(&self.as_slice()[start..end])
    }

    pub fn claimed_nft_keys(&self) -> ClaimedCompactNFTKeyVecReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[12..]) as usize;
        let end = molecule::unpack_number(&slice[16..]) as usize;
        ClaimedCompactNFTKeyVecReader::new_unchecked(&self.as_slice()[start..end])
    }

    pub fn claimed_nft_values(&self) -> ClaimedCommpactNFTValueVecReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[16..]) as usize;
        let end = molecule::unpack_number(&slice[20..]) as usize;
        ClaimedCommpactNFTValueVecReader::new_unchecked(&self.as_slice()[start..end])
    }

    pub fn proof(&self) -> BytesReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[20..]) as usize;
        if self.has_extra_fields() {
            let end = molecule::unpack_number(&slice[24..]) as usize;
            BytesReader::new_unchecked(&self.as_slice()[start..end])
        } else {
            BytesReader::new_unchecked(&self.as_slice()[start..])
        }
    }
}
impl<'r> molecule::prelude::Reader<'r> for ClaimCompactNFTEntriesReader<'r> {
    type Entity = ClaimCompactNFTEntries;

    const NAME: &'static str = "ClaimCompactNFTEntriesReader";

    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().to_owned().into())
    }

    fn new_unchecked(slice: &'r [u8]) -> Self {
        ClaimCompactNFTEntriesReader(slice)
    }

    fn as_slice(&self) -> &'r [u8] {
        self.0
    }

    fn verify(slice: &[u8], compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len < molecule::NUMBER_SIZE {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE, slice_len);
        }
        let total_size = molecule::unpack_number(slice) as usize;
        if slice_len != total_size {
            return ve!(Self, TotalSizeNotMatch, total_size, slice_len);
        }
        if slice_len == molecule::NUMBER_SIZE && Self::FIELD_COUNT == 0 {
            return Ok(());
        }
        if slice_len < molecule::NUMBER_SIZE * 2 {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE * 2, slice_len);
        }
        let offset_first = molecule::unpack_number(&slice[molecule::NUMBER_SIZE..]) as usize;
        if offset_first % molecule::NUMBER_SIZE != 0 || offset_first < molecule::NUMBER_SIZE * 2 {
            return ve!(Self, OffsetsNotMatch);
        }
        if slice_len < offset_first {
            return ve!(Self, HeaderIsBroken, offset_first, slice_len);
        }
        let field_count = offset_first / molecule::NUMBER_SIZE - 1;
        if field_count < Self::FIELD_COUNT {
            return ve!(Self, FieldCountNotMatch, Self::FIELD_COUNT, field_count);
        } else if !compatible && field_count > Self::FIELD_COUNT {
            return ve!(Self, FieldCountNotMatch, Self::FIELD_COUNT, field_count);
        };
        let mut offsets: Vec<usize> = slice[molecule::NUMBER_SIZE..offset_first]
            .chunks_exact(molecule::NUMBER_SIZE)
            .map(|x| molecule::unpack_number(x) as usize)
            .collect();
        offsets.push(total_size);
        if offsets.windows(2).any(|i| i[0] > i[1]) {
            return ve!(Self, OffsetsNotMatch);
        }
        CompactNFTIdVecReader::verify(&slice[offsets[0]..offsets[1]], compatible)?;
        OwnedCompactNFTValueVecReader::verify(&slice[offsets[1]..offsets[2]], compatible)?;
        ClaimedCompactNFTKeyVecReader::verify(&slice[offsets[2]..offsets[3]], compatible)?;
        ClaimedCommpactNFTValueVecReader::verify(&slice[offsets[3]..offsets[4]], compatible)?;
        BytesReader::verify(&slice[offsets[4]..offsets[5]], compatible)?;
        Ok(())
    }
}
#[derive(Debug, Default)]
pub struct ClaimCompactNFTEntriesBuilder {
    pub(crate) owned_nft_ids:      CompactNFTIdVec,
    pub(crate) owned_nft_values:   OwnedCompactNFTValueVec,
    pub(crate) claimed_nft_keys:   ClaimedCompactNFTKeyVec,
    pub(crate) claimed_nft_values: ClaimedCommpactNFTValueVec,
    pub(crate) proof:              Bytes,
}
impl ClaimCompactNFTEntriesBuilder {
    pub const FIELD_COUNT: usize = 5;

    pub fn owned_nft_ids(mut self, v: CompactNFTIdVec) -> Self {
        self.owned_nft_ids = v;
        self
    }

    pub fn owned_nft_values(mut self, v: OwnedCompactNFTValueVec) -> Self {
        self.owned_nft_values = v;
        self
    }

    pub fn claimed_nft_keys(mut self, v: ClaimedCompactNFTKeyVec) -> Self {
        self.claimed_nft_keys = v;
        self
    }

    pub fn claimed_nft_values(mut self, v: ClaimedCommpactNFTValueVec) -> Self {
        self.claimed_nft_values = v;
        self
    }

    pub fn proof(mut self, v: Bytes) -> Self {
        self.proof = v;
        self
    }
}
impl molecule::prelude::Builder for ClaimCompactNFTEntriesBuilder {
    type Entity = ClaimCompactNFTEntries;

    const NAME: &'static str = "ClaimCompactNFTEntriesBuilder";

    fn expected_length(&self) -> usize {
        molecule::NUMBER_SIZE * (Self::FIELD_COUNT + 1)
            + self.owned_nft_ids.as_slice().len()
            + self.owned_nft_values.as_slice().len()
            + self.claimed_nft_keys.as_slice().len()
            + self.claimed_nft_values.as_slice().len()
            + self.proof.as_slice().len()
    }

    fn write<W: molecule::io::Write>(&self, writer: &mut W) -> molecule::io::Result<()> {
        let mut total_size = molecule::NUMBER_SIZE * (Self::FIELD_COUNT + 1);
        let mut offsets = Vec::with_capacity(Self::FIELD_COUNT);
        offsets.push(total_size);
        total_size += self.owned_nft_ids.as_slice().len();
        offsets.push(total_size);
        total_size += self.owned_nft_values.as_slice().len();
        offsets.push(total_size);
        total_size += self.claimed_nft_keys.as_slice().len();
        offsets.push(total_size);
        total_size += self.claimed_nft_values.as_slice().len();
        offsets.push(total_size);
        total_size += self.proof.as_slice().len();
        writer.write_all(&molecule::pack_number(total_size as molecule::Number))?;
        for offset in offsets.into_iter() {
            writer.write_all(&molecule::pack_number(offset as molecule::Number))?;
        }
        writer.write_all(self.owned_nft_ids.as_slice())?;
        writer.write_all(self.owned_nft_values.as_slice())?;
        writer.write_all(self.claimed_nft_keys.as_slice())?;
        writer.write_all(self.claimed_nft_values.as_slice())?;
        writer.write_all(self.proof.as_slice())?;
        Ok(())
    }

    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        ClaimCompactNFTEntries::new_unchecked(inner.into())
    }
}
#[derive(Clone)]
pub struct WithdrawCompactNFTEntries(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for WithdrawCompactNFTEntries {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for WithdrawCompactNFTEntries {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for WithdrawCompactNFTEntries {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "owned_nft_ids", self.owned_nft_ids())?;
        write!(f, ", {}: {}", "owned_nft_values", self.owned_nft_values())?;
        write!(
            f,
            ", {}: {}",
            "withdrawal_nft_ids",
            self.withdrawal_nft_ids()
        )?;
        write!(
            f,
            ", {}: {}",
            "withdrawal_nft_values",
            self.withdrawal_nft_values()
        )?;
        write!(f, ", {}: {}", "proof", self.proof())?;
        let extra_count = self.count_extra_fields();
        if extra_count != 0 {
            write!(f, ", .. ({} fields)", extra_count)?;
        }
        write!(f, " }}")
    }
}
impl ::core::default::Default for WithdrawCompactNFTEntries {
    fn default() -> Self {
        let v: Vec<u8> = vec![
            44, 0, 0, 0, 24, 0, 0, 0, 28, 0, 0, 0, 32, 0, 0, 0, 36, 0, 0, 0, 40, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        ];
        WithdrawCompactNFTEntries::new_unchecked(v.into())
    }
}
impl WithdrawCompactNFTEntries {
    pub const FIELD_COUNT: usize = 5;

    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }

    pub fn field_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }

    pub fn count_extra_fields(&self) -> usize {
        self.field_count() - Self::FIELD_COUNT
    }

    pub fn has_extra_fields(&self) -> bool {
        Self::FIELD_COUNT != self.field_count()
    }

    pub fn owned_nft_ids(&self) -> CompactNFTIdVec {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[4..]) as usize;
        let end = molecule::unpack_number(&slice[8..]) as usize;
        CompactNFTIdVec::new_unchecked(self.0.slice(start..end))
    }

    pub fn owned_nft_values(&self) -> OwnedCompactNFTValueVec {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[8..]) as usize;
        let end = molecule::unpack_number(&slice[12..]) as usize;
        OwnedCompactNFTValueVec::new_unchecked(self.0.slice(start..end))
    }

    pub fn withdrawal_nft_ids(&self) -> CompactNFTIdVec {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[12..]) as usize;
        let end = molecule::unpack_number(&slice[16..]) as usize;
        CompactNFTIdVec::new_unchecked(self.0.slice(start..end))
    }

    pub fn withdrawal_nft_values(&self) -> WithdrawCompactNFTValueVec {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[16..]) as usize;
        let end = molecule::unpack_number(&slice[20..]) as usize;
        WithdrawCompactNFTValueVec::new_unchecked(self.0.slice(start..end))
    }

    pub fn proof(&self) -> Bytes {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[20..]) as usize;
        if self.has_extra_fields() {
            let end = molecule::unpack_number(&slice[24..]) as usize;
            Bytes::new_unchecked(self.0.slice(start..end))
        } else {
            Bytes::new_unchecked(self.0.slice(start..))
        }
    }

    pub fn as_reader<'r>(&'r self) -> WithdrawCompactNFTEntriesReader<'r> {
        WithdrawCompactNFTEntriesReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for WithdrawCompactNFTEntries {
    type Builder = WithdrawCompactNFTEntriesBuilder;

    const NAME: &'static str = "WithdrawCompactNFTEntries";

    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        WithdrawCompactNFTEntries(data)
    }

    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }

    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }

    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        WithdrawCompactNFTEntriesReader::from_slice(slice).map(|reader| reader.to_entity())
    }

    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        WithdrawCompactNFTEntriesReader::from_compatible_slice(slice)
            .map(|reader| reader.to_entity())
    }

    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }

    fn as_builder(self) -> Self::Builder {
        Self::new_builder()
            .owned_nft_ids(self.owned_nft_ids())
            .owned_nft_values(self.owned_nft_values())
            .withdrawal_nft_ids(self.withdrawal_nft_ids())
            .withdrawal_nft_values(self.withdrawal_nft_values())
            .proof(self.proof())
    }
}
#[derive(Clone, Copy)]
pub struct WithdrawCompactNFTEntriesReader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for WithdrawCompactNFTEntriesReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for WithdrawCompactNFTEntriesReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for WithdrawCompactNFTEntriesReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "owned_nft_ids", self.owned_nft_ids())?;
        write!(f, ", {}: {}", "owned_nft_values", self.owned_nft_values())?;
        write!(
            f,
            ", {}: {}",
            "withdrawal_nft_ids",
            self.withdrawal_nft_ids()
        )?;
        write!(
            f,
            ", {}: {}",
            "withdrawal_nft_values",
            self.withdrawal_nft_values()
        )?;
        write!(f, ", {}: {}", "proof", self.proof())?;
        let extra_count = self.count_extra_fields();
        if extra_count != 0 {
            write!(f, ", .. ({} fields)", extra_count)?;
        }
        write!(f, " }}")
    }
}
impl<'r> WithdrawCompactNFTEntriesReader<'r> {
    pub const FIELD_COUNT: usize = 5;

    pub fn total_size(&self) -> usize {
        molecule::unpack_number(self.as_slice()) as usize
    }

    pub fn field_count(&self) -> usize {
        if self.total_size() == molecule::NUMBER_SIZE {
            0
        } else {
            (molecule::unpack_number(&self.as_slice()[molecule::NUMBER_SIZE..]) as usize / 4) - 1
        }
    }

    pub fn count_extra_fields(&self) -> usize {
        self.field_count() - Self::FIELD_COUNT
    }

    pub fn has_extra_fields(&self) -> bool {
        Self::FIELD_COUNT != self.field_count()
    }

    pub fn owned_nft_ids(&self) -> CompactNFTIdVecReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[4..]) as usize;
        let end = molecule::unpack_number(&slice[8..]) as usize;
        CompactNFTIdVecReader::new_unchecked(&self.as_slice()[start..end])
    }

    pub fn owned_nft_values(&self) -> OwnedCompactNFTValueVecReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[8..]) as usize;
        let end = molecule::unpack_number(&slice[12..]) as usize;
        OwnedCompactNFTValueVecReader::new_unchecked(&self.as_slice()[start..end])
    }

    pub fn withdrawal_nft_ids(&self) -> CompactNFTIdVecReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[12..]) as usize;
        let end = molecule::unpack_number(&slice[16..]) as usize;
        CompactNFTIdVecReader::new_unchecked(&self.as_slice()[start..end])
    }

    pub fn withdrawal_nft_values(&self) -> WithdrawCompactNFTValueVecReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[16..]) as usize;
        let end = molecule::unpack_number(&slice[20..]) as usize;
        WithdrawCompactNFTValueVecReader::new_unchecked(&self.as_slice()[start..end])
    }

    pub fn proof(&self) -> BytesReader<'r> {
        let slice = self.as_slice();
        let start = molecule::unpack_number(&slice[20..]) as usize;
        if self.has_extra_fields() {
            let end = molecule::unpack_number(&slice[24..]) as usize;
            BytesReader::new_unchecked(&self.as_slice()[start..end])
        } else {
            BytesReader::new_unchecked(&self.as_slice()[start..])
        }
    }
}
impl<'r> molecule::prelude::Reader<'r> for WithdrawCompactNFTEntriesReader<'r> {
    type Entity = WithdrawCompactNFTEntries;

    const NAME: &'static str = "WithdrawCompactNFTEntriesReader";

    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().to_owned().into())
    }

    fn new_unchecked(slice: &'r [u8]) -> Self {
        WithdrawCompactNFTEntriesReader(slice)
    }

    fn as_slice(&self) -> &'r [u8] {
        self.0
    }

    fn verify(slice: &[u8], compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len < molecule::NUMBER_SIZE {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE, slice_len);
        }
        let total_size = molecule::unpack_number(slice) as usize;
        if slice_len != total_size {
            return ve!(Self, TotalSizeNotMatch, total_size, slice_len);
        }
        if slice_len == molecule::NUMBER_SIZE && Self::FIELD_COUNT == 0 {
            return Ok(());
        }
        if slice_len < molecule::NUMBER_SIZE * 2 {
            return ve!(Self, HeaderIsBroken, molecule::NUMBER_SIZE * 2, slice_len);
        }
        let offset_first = molecule::unpack_number(&slice[molecule::NUMBER_SIZE..]) as usize;
        if offset_first % molecule::NUMBER_SIZE != 0 || offset_first < molecule::NUMBER_SIZE * 2 {
            return ve!(Self, OffsetsNotMatch);
        }
        if slice_len < offset_first {
            return ve!(Self, HeaderIsBroken, offset_first, slice_len);
        }
        let field_count = offset_first / molecule::NUMBER_SIZE - 1;
        if field_count < Self::FIELD_COUNT {
            return ve!(Self, FieldCountNotMatch, Self::FIELD_COUNT, field_count);
        } else if !compatible && field_count > Self::FIELD_COUNT {
            return ve!(Self, FieldCountNotMatch, Self::FIELD_COUNT, field_count);
        };
        let mut offsets: Vec<usize> = slice[molecule::NUMBER_SIZE..offset_first]
            .chunks_exact(molecule::NUMBER_SIZE)
            .map(|x| molecule::unpack_number(x) as usize)
            .collect();
        offsets.push(total_size);
        if offsets.windows(2).any(|i| i[0] > i[1]) {
            return ve!(Self, OffsetsNotMatch);
        }
        CompactNFTIdVecReader::verify(&slice[offsets[0]..offsets[1]], compatible)?;
        OwnedCompactNFTValueVecReader::verify(&slice[offsets[1]..offsets[2]], compatible)?;
        CompactNFTIdVecReader::verify(&slice[offsets[2]..offsets[3]], compatible)?;
        WithdrawCompactNFTValueVecReader::verify(&slice[offsets[3]..offsets[4]], compatible)?;
        BytesReader::verify(&slice[offsets[4]..offsets[5]], compatible)?;
        Ok(())
    }
}
#[derive(Debug, Default)]
pub struct WithdrawCompactNFTEntriesBuilder {
    pub(crate) owned_nft_ids:         CompactNFTIdVec,
    pub(crate) owned_nft_values:      OwnedCompactNFTValueVec,
    pub(crate) withdrawal_nft_ids:    CompactNFTIdVec,
    pub(crate) withdrawal_nft_values: WithdrawCompactNFTValueVec,
    pub(crate) proof:                 Bytes,
}
impl WithdrawCompactNFTEntriesBuilder {
    pub const FIELD_COUNT: usize = 5;

    pub fn owned_nft_ids(mut self, v: CompactNFTIdVec) -> Self {
        self.owned_nft_ids = v;
        self
    }

    pub fn owned_nft_values(mut self, v: OwnedCompactNFTValueVec) -> Self {
        self.owned_nft_values = v;
        self
    }

    pub fn withdrawal_nft_ids(mut self, v: CompactNFTIdVec) -> Self {
        self.withdrawal_nft_ids = v;
        self
    }

    pub fn withdrawal_nft_values(mut self, v: WithdrawCompactNFTValueVec) -> Self {
        self.withdrawal_nft_values = v;
        self
    }

    pub fn proof(mut self, v: Bytes) -> Self {
        self.proof = v;
        self
    }
}
impl molecule::prelude::Builder for WithdrawCompactNFTEntriesBuilder {
    type Entity = WithdrawCompactNFTEntries;

    const NAME: &'static str = "WithdrawCompactNFTEntriesBuilder";

    fn expected_length(&self) -> usize {
        molecule::NUMBER_SIZE * (Self::FIELD_COUNT + 1)
            + self.owned_nft_ids.as_slice().len()
            + self.owned_nft_values.as_slice().len()
            + self.withdrawal_nft_ids.as_slice().len()
            + self.withdrawal_nft_values.as_slice().len()
            + self.proof.as_slice().len()
    }

    fn write<W: molecule::io::Write>(&self, writer: &mut W) -> molecule::io::Result<()> {
        let mut total_size = molecule::NUMBER_SIZE * (Self::FIELD_COUNT + 1);
        let mut offsets = Vec::with_capacity(Self::FIELD_COUNT);
        offsets.push(total_size);
        total_size += self.owned_nft_ids.as_slice().len();
        offsets.push(total_size);
        total_size += self.owned_nft_values.as_slice().len();
        offsets.push(total_size);
        total_size += self.withdrawal_nft_ids.as_slice().len();
        offsets.push(total_size);
        total_size += self.withdrawal_nft_values.as_slice().len();
        offsets.push(total_size);
        total_size += self.proof.as_slice().len();
        writer.write_all(&molecule::pack_number(total_size as molecule::Number))?;
        for offset in offsets.into_iter() {
            writer.write_all(&molecule::pack_number(offset as molecule::Number))?;
        }
        writer.write_all(self.owned_nft_ids.as_slice())?;
        writer.write_all(self.owned_nft_values.as_slice())?;
        writer.write_all(self.withdrawal_nft_ids.as_slice())?;
        writer.write_all(self.withdrawal_nft_values.as_slice())?;
        writer.write_all(self.proof.as_slice())?;
        Ok(())
    }

    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        WithdrawCompactNFTEntries::new_unchecked(inner.into())
    }
}
