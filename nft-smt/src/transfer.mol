import common;

struct CompactNFTKey {
    smt_type: byte,
    nft_id: CompactNFTId,
}

vector CompactNFTKeyVec <CompactNFTKey>;

struct ClaimedCompactNFTKey {
	nft_key: CompactNFTKey,
    out_point: OutPointBytes,
}

vector ClaimedCompactNFTKeyVec <ClaimedCompactNFTKey>;

vector OwnedCompactNFTValueVec <CompactNFTInfo>;

vector ClaimedCommpactNFTValueVec <Byte32>;

struct WithdrawCompactNFTValue {
	nft_info: CompactNFTInfo,
	to: LockHash,
	out_point: OutPointBytes,
}

vector WithdrawCompactNFTValueVec <WithdrawCompactNFTValue>;

table ClaimMintCompactNFTEntries {
    owned_nft_keys: CompactNFTKeyVec,
    owned_nft_values: OwnedCompactNFTValueVec,
	claimed_nft_keys: ClaimedCompactNFTKeyVec,
    claimed_nft_values: ClaimedCommpactNFTValueVec,
    proof: Bytes,
    mint_proof: Bytes,
}

table ClaimTransferCompactNFTEntries {
    owned_nft_keys: CompactNFTKeyVec,
    owned_nft_values: OwnedCompactNFTValueVec,
	claimed_nft_keys: ClaimedCompactNFTKeyVec,
    claimed_nft_values: ClaimedCommpactNFTValueVec,
    proof: Bytes,
}

table WithdrawTransferCompactNFTEntries {
    owned_nft_keys: CompactNFTKeyVec,
    owned_nft_values: OwnedCompactNFTValueVec,
	withdrawal_nft_keys: CompactNFTKeyVec,
	withdrawal_nft_values: WithdrawCompactNFTValueVec,
    proof: Bytes,
}